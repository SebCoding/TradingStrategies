// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© cryptos72

//@version=5
strategy(
     "UltimateScalper", 
     overlay=true, 
     initial_capital=10000,
     commission_type=strategy.commission.percent,
     commission_value=0,
     slippage=0)

// Getting inputs

// Exit Strategy Inputs
exitStrategyType = input.string(title= 'TP/SL Calculation Type', defval='Fixed %', options=['Fixed %', 'ATR Factor'], group='Exit Strategy - Take Profit / Stop Loss')
// Fixed % TP/SL
fixedPctExitGroup = 'Fixed % - Take Profit / Stop Loss'
tpPctInput = input.float(title='Take Profit %', defval=0.8, group=fixedPctExitGroup, minval=0, step=0.1)
slPctInput = input.float(title='Stop Loss %', defval=0.8, group=fixedPctExitGroup, minval=0, step=0.1)

// ATR Factor TP/SL
atrFactorExitGroup = 'ATR Factor - Take Profit / Stop Loss'
atrFactorTPInput = input.float(title='Take Profit (ATR Factor)', defval=3.0, group=atrFactorExitGroup, minval=0.0, step=0.1, 
                     tooltip='The take profit will be calculated using the value entered multiplied by the ATR')
atrFactorSLInput = input.float(title='Stop Loss (ATR Factor)', defval=2.0, group=atrFactorExitGroup, minval=0.0, step=0.1,
                     tooltip='The stop loss will be calculated using the value entered multiplied by the ATR')
atrLengthInput = input.int(title='ATR Indicator Length', defval=14, group=atrFactorExitGroup, step=1)

// EMA Inputs
emaMode = input.string(title="EMA Mode: 3EMA / 1EMA (Trend)", defval="3 EMA", options=["3 EMA", "1 EMA (Trend)"], group='EMA')
emaMode := emaMode == "3 EMA" ? '3EMA': '1EMA'
emaFastInput = input(title='EMA Fast', defval=9, group='EMA')
emaSlowInput = input(title='EMA Slow', defval=55, group='EMA')
emaTrendInput = input(title='EMA Trend', defval=200, group='EMA')

// RSI Inputs
rsiEnabled = input.bool(false, "Enable", group='RSI')
rsiPeriodsInput = input(title='Periods', defval=2, group='RSI')
rsiLowInput = input(title='Low', defval=48, group='RSI')
rsiHighInput = input(title='High', defval=52, group='RSI')

// ADX Inputs
adxEnabled = input.bool(true, "Enable", group='ADX')
adxLengthInput = input(title='Length', defval=3, group='ADX')
//adxSmoothingPeriodsInput = input(title='Smoothing Periods', defval=14, group='ADX')
adxThresholdInput = input(title='Threshold', defval=66, group='ADX')

// MACD Inputs
macdGroup = 'MACD (1min Timeframe)'
srcInput = input(title="Source", defval=close, group=macdGroup)
fastLengthInput = input(title="Fast Length", defval=12, group=macdGroup)
slowLengthInput = input(title="Slow Length", defval=26, group=macdGroup)
signalLengthInput = input.int(title="Signal Smoothing",  minval = 1, maxval = 50, defval = 9, group=macdGroup)

// Bollinger Bands Inputs
bbGroup = 'MACD Histogram: Use Bollinger Bands for Over Average'
bbEnabled = input.bool(true, "Enable", group=bbGroup)
bbLengthInput = input.int(34, minval=1, title='Length (number of bars)', group=bbGroup)
bbMultInput = input.float(1, minval=0.001, maxval=50, title='Mult (standard deviation factor)', group=bbGroup)

// MACD Histogram Over SMA +/- Inputs
macdOverSMAGroup = 'MACD Histogram: Use SMA +/- for Over Average'
macdOverSMAEnabled = input.bool(false, "Enable", group=macdOverSMAGroup)
macdOverSMALength = input(5, 'SMA Length', group=macdOverSMAGroup)

// Function to calculate macd and bb in 1m timeframe
get_macd_bb_sma(src) =>
    [macdLine, signalLine, histLine] = ta.macd(src, fastLengthInput, slowLengthInput, signalLengthInput)
    
    // SMA Calculation for +/- values separately
    posCount = 0
    negCount = 0
    float posSum = 0
    float negSum = 0
    // Slows down the refreshing of the strategy even when option is not selected so we loop only when needed
    if macdOverSMAEnabled
        for i = 0 to macdOverSMALength by 1
            if histLine[i] > 0
                posSum += histLine[i]
                posCount += 1
            else if histLine[i] < 0
                negSum += histLine[i]
                negCount += 1
    posSMA = posCount > 0 ? posSum / posCount: 0
    negSMA = negCount > 0 ? negSum / negCount: 0
    
    // Bollinger Bands
    basis = ta.ema(histLine, bbLengthInput)
    dev = bbMultInput * ta.stdev(histLine, bbLengthInput)
    bbUpper = basis + dev
    bbLower = basis - dev
    [histLine, bbUpper, bbLower, posSMA, negSMA]

// Calculations
emaFast = ta.ema(close, emaFastInput)
emaSlow = ta.ema(close, emaSlowInput)
emaTrend = ta.ema(close, emaTrendInput)
rsi = ta.rsi(close, rsiPeriodsInput)
atr = ta.atr(atrLengthInput)
[histLine, bbUpper, bbLower, posSMA, negSMA] = request.security(syminfo.tickerid, '1', get_macd_bb_sma(srcInput))

// Calculate ADX manually, seems like ta.dmi() returns an invalid adx value
// Inavlid adx values => [diplus, diminus, adx] = ta.dmi(adxLengthInput, adxSmoothingPeriodsInput)
TrueRange = math.max(math.max(high-low, math.abs(high-nz(close[1]))), math.abs(low-nz(close[1])))
DirectionalMovementPlus = high-nz(high[1]) > nz(low[1])-low ? math.max(high-nz(high[1]), 0): 0
DirectionalMovementMinus = nz(low[1])-low > high-nz(high[1]) ? math.max(nz(low[1])-low, 0): 0

SmoothedTrueRange = 0.0
SmoothedTrueRange := nz(SmoothedTrueRange[1]) - (nz(SmoothedTrueRange[1])/adxLengthInput) + TrueRange

SmoothedDirectionalMovementPlus = 0.0
SmoothedDirectionalMovementPlus := nz(SmoothedDirectionalMovementPlus[1]) - (nz(SmoothedDirectionalMovementPlus[1])/adxLengthInput) + DirectionalMovementPlus

SmoothedDirectionalMovementMinus = 0.0
SmoothedDirectionalMovementMinus := nz(SmoothedDirectionalMovementMinus[1]) - (nz(SmoothedDirectionalMovementMinus[1])/adxLengthInput) + DirectionalMovementMinus

DIPlus = SmoothedDirectionalMovementPlus / SmoothedTrueRange * 100
DIMinus = SmoothedDirectionalMovementMinus / SmoothedTrueRange * 100
DX = math.abs(DIPlus-DIMinus) / (DIPlus+DIMinus)*100
adx = ta.sma(DX, adxLengthInput)


// PLot EMA
plot(emaFast, "emaFast", color=color.blue)
plot(emaSlow, "emaSlow", color=color.green)
plot(emaTrend, "emaTrend", color=color.yellow)

// Plot values for debugging in data panel
plotchar(rsi, "RSI", "", location.top, size = size.tiny)
plotchar(adx, "ADX", "", location.top, size = size.tiny)
plotchar(atr, "ATR", "", location.top, size = size.tiny)
plotchar(histLine, "MACD Histogram", "", location.top, size = size.tiny)
plotchar(bbUpper, "MACD Histogram: BB Upper", "", location.top, size = size.tiny)
plotchar(bbLower, "MACD Histogram: BB Lower", "", location.top, size = size.tiny)
plotchar(posSMA, "MACD Histogram: SMA +", "", location.top, size = size.tiny)
plotchar(negSMA, "MACD Histogram: SMA -", "", location.top, size = size.tiny)

// Entry Signals
longSignal = strategy.position_size == 0
             and ((not rsiEnabled) or (rsi > rsiHighInput))
             and ((not adxEnabled) or (adx >= adxThresholdInput))
             and ((emaMode == '3EMA' and emaFast > emaSlow and emaSlow > emaTrend) or 
                  (emaMode == '1EMA' and close > emaTrend))
             and ((not bbEnabled) or (histLine <= bbLower))
             and ((not macdOverSMAEnabled) or (histLine <= negSMA))
             
shortSignal = strategy.position_size == 0
             and ((not rsiEnabled) or (rsi < rsiLowInput))
             and ((not adxEnabled) or (adx >= adxThresholdInput))
             and ((emaMode == '3EMA' and emaFast < emaSlow and emaSlow < emaTrend) or 
                  (emaMode == '1EMA' and close < emaTrend))
             and ((not bbEnabled) or (histLine >= bbUpper))
             and ((not macdOverSMAEnabled) or (histLine >= posSMA))
                          
// Plotting Entry Signals
plotshape(longSignal, color=color.green, location=location.belowbar, text='L', style=shape.diamond, size=size.tiny)
plotshape(shortSignal, color=color.red, location=location.abovebar, text="S", style=shape.diamond, size=size.tiny)

// Calculate size of trade
//tradeQty = tradeAmountInput / close
tradeQty = strategy.equity / close

//TP & SLlongSignal
float longTPAmount = na
float longSLAmount = na
float shortTPAmount = na
float shortSLAmount = na
float entryAmount = na

if exitStrategyType == 'Fixed %'
    longTPAmount := longSignal ? close + (close * tpPctInput / 100): longTPAmount[1]
    longSLAmount := longSignal ? close - (close * slPctInput / 100): longSLAmount[1]
    shortTPAmount := shortSignal ? close - (close * tpPctInput / 100): shortTPAmount[1]
    shortSLAmount := shortSignal ? close + (close * slPctInput / 100): shortSLAmount[1]
    
if exitStrategyType == 'ATR Factor'
    longTPAmount := longSignal ? close + (atrFactorTPInput * atr * syminfo.mintick): longTPAmount[1]
    longSLAmount := longSignal ? close - (atrFactorSLInput * atr * syminfo.mintick): longSLAmount[1]
    shortTPAmount := shortSignal ? close - (atrFactorTPInput * atr * syminfo.mintick): shortTPAmount[1]
    shortSLAmount := shortSignal ? close + (atrFactorSLInput * atr * syminfo.mintick): shortSLAmount[1]

entryAmount := longSignal or shortSignal ? close: entryAmount[1]

// Trade Entries
strategy.entry("LongEntry", strategy.long, qty=tradeQty, when=longSignal)
strategy.entry("ShortEntry", strategy.short, qty=tradeQty, when=shortSignal)

// Trade Exits
strategy.exit("LongExit", "LongEntry", qty_percent=100, limit=longTPAmount, stop=longSLAmount)
strategy.exit("ShortExit", "ShortEntry", qty_percent=100, limit=shortTPAmount, stop=shortSLAmount)

// Plot TP/SL values for debugging in data panel
plotchar(longTPAmount, "longTPAmount", "", location.top, size = size.tiny)
plotchar(longSLAmount, "longSLAmount", "", location.top, size = size.tiny)
plotchar(shortTPAmount, "shortTPAmount", "", location.top, size = size.tiny)
plotchar(shortSLAmount, "shortSLAmount", "", location.top, size = size.tiny)

// Plot trade boxes to show tp/sl zones in reg/green
// We are using (strategy.position_size[1] == 0) to draw for an extra candle, up to the closing candle
zeroLinePlot = plot(strategy.position_size == 0 and strategy.position_size[1] == 0 ? na : entryAmount, color=color.gray, style=plot.style_linebr, linewidth=1)

longSLPlot = plot(strategy.position_size <= 0 and strategy.position_size[1] <= 0 ? na : longSLAmount, color=color.red, style=plot.style_linebr, linewidth=1)
longTPPlot = plot(strategy.position_size <= 0 and strategy.position_size[1] <= 0 ? na : longTPAmount, color=color.green, style=plot.style_linebr, linewidth=1)
fill(zeroLinePlot, longSLPlot, color=color.new(color.red, 90))
fill(zeroLinePlot, longTPPlot, color=color.new(color.green, 90))

shortSLPlot = plot(strategy.position_size >= 0 and strategy.position_size[1] >= 0 ? na : shortSLAmount, color=color.red, style=plot.style_linebr, linewidth=1)
shortTPPlot = plot(strategy.position_size >= 0 and strategy.position_size[1] >= 0 ? na : shortTPAmount, color=color.green, style=plot.style_linebr, linewidth=1)
fill(zeroLinePlot, shortSLPlot, color=color.new(color.red, 90))
fill(zeroLinePlot, shortTPPlot, color=color.new(color.green, 90))
