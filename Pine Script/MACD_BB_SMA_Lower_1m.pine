// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © cryptos72

//@version=5
indicator("MACD_BB_SMA_Lower_1m", timeframe='')

// Getting inputs
src = input(title="Source", defval=close, group='MACD')
fast_length = input(title="Fast Length", defval=12, group='MACD')
slow_length = input(title="Slow Length", defval=26, group='MACD')
signal_length = input.int(title="Signal Smoothing",  minval = 1, maxval = 50, defval = 9, group='MACD')
sma_source = input.string(title="Oscillator MA Type",  defval="EMA", options=["SMA", "EMA"], group='MACD')
sma_signal = input.string(title="Signal Line MA Type", defval="EMA", options=["SMA", "EMA"], group='MACD')

bb_length = input.int(34, minval=1, title='Length (number of bars)', group='Bollinger Bands')
bb_mult = input.float(1, minval=0.001, maxval=50, title='Mult (standard deviation factor)', group='Bollinger Bands')

sma_length = input.int(title="SMA Length", defval=5, minval=1, group='MACD Histogram SMA')

// MACD Plot colors
col_macd = input(#2962FF, "MACD Line  ", inline="MACD", group='MACD')
col_signal = input(#FF6D00, "Signal Line  ", inline="Signal", group='MACD')
col_grow_above = input(#26A69A, "Above   Grow", inline="Above", group='MACD')
col_fall_above = input(#B2DFDB, "Fall", inline="Above", group='MACD')
col_grow_below = input(#FFCDD2, "Below Grow", inline="Below", group='MACD')
col_fall_below = input(#FF5252, "Fall", inline="Below", group='MACD')

// Function to calculate macd and bb in 1m timeframe
get_macd_bb_sma(src, fast_length, slow_length, signal_length, bb_length, bb_mult) =>
    [macdLine, signalLine, histLine] = ta.macd(src, fast_length, slow_length, signal_length)
    
    // SMA Calculation for +/- values separately
    pos_count = 0
    neg_count = 0
    float pos_sum = 0
    float neg_sum = 0
    for i = 0 to sma_length by 1
        if histLine[i] > 0
            pos_sum += histLine[i]
            pos_count += 1
        else if histLine[i] < 0
            neg_sum += histLine[i]
            neg_count += 1
    pos_sma = pos_count > 0 ? pos_sum / pos_count: 0
    neg_sma = neg_count > 0 ? neg_sum / neg_count: 0
    
    // Bollinger Bands
    basis = ta.ema(histLine, bb_length)
    dev = bb_mult * ta.stdev(histLine, bb_length)
    bb_upper = basis + dev
    bb_lower = basis - dev
    
    // Return results
    [histLine, bb_lower, bb_upper, pos_sma, neg_sma]
    
    
[histLine, bb_lower, bb_upper, pos_sma, neg_sma] = request.security(syminfo.tickerid, '1', get_macd_bb_sma(src, fast_length, slow_length, signal_length, bb_length, bb_mult))


// Plot MACD
plot(histLine, title="Histogram", style=plot.style_columns, color=(histLine>=0 ? (histLine[1] < histLine ? col_grow_above : col_fall_above) : (histLine[1] < histLine ? col_grow_below : col_fall_below)))
// plot(macd, title="MACD", color=col_macd)
// plot(signal, title="Signal", color=col_signal)

// Plot BB
//plot(basis, title='BB Basis', color=color.new(color.black, 70))
p1 = plot(bb_upper, title='BB Upper', color=color.new(color.aqua, 0))
p2 = plot(bb_lower, title='BB Lower', color=color.new(color.aqua, 0))
//fill(p1, p2, title='BB Background', color=color.new(color.black, 95))

// Plot pos_sma and neg_sma
plot(pos_sma, title='SMA+', color=color.new(color.yellow, 0))
plot(neg_sma, title='SMA-', color=color.new(color.yellow, 0))

plotchar(pos_sma, "SMA +", "", location.top, size = size.tiny)
plotchar(neg_sma, "SMA -", "", location.top, size = size.tiny)



