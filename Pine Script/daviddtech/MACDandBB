//@version=5
//MESSY CODE SORRY HAVEN'T HAD TIME TO MOD THIS AS AN IDEA.
indicator(title='MACD oversold + overbrought', timeframe='')
// Getting inputs
fast_length = input(title='Fast Length', defval=12)
slow_length = input(title='Slow Length', defval=26)
src = input(title='Source', defval=close)
signal_length = input.int(title='Signal Smoothing', minval=1, maxval=50, defval=9)
sma_source = input.string(title='Oscillator MA Type', defval='EMA', options=['SMA', 'EMA'])
sma_signal = input.string(title='Signal Line MA Type', defval='EMA', options=['SMA', 'EMA'])
// Plot colors
col_macd = input.color(#2962FF, 'MACD Line  ', group='Color Settings', inline='MACD')
col_signal = input.color(#FF6D00, 'Signal Line  ', group='Color Settings', inline='Signal')
col_grow_above = input.color(#26A69A, 'Above   Grow', group='Histogram', inline='Above')
col_fall_above = input.color(#B2DFDB, 'Fall', group='Histogram', inline='Above')
col_grow_below = input.color(#FFCDD2, 'Below Grow', group='Histogram', inline='Below')
col_fall_below = input.color(#FF5252, 'Fall', group='Histogram', inline='Below')
// Calculating
fast_ma = sma_source == 'SMA' ? ta.sma(src, fast_length) : ta.ema(src, fast_length)
slow_ma = sma_source == 'SMA' ? ta.sma(src, slow_length) : ta.ema(src, slow_length)
macd = fast_ma - slow_ma
signal = sma_signal == 'SMA' ? ta.sma(macd, signal_length) : ta.ema(macd, signal_length)
hist = macd - signal

mySma(source, length) =>  // define the function name and parameters
	sum = 0.0
	lenghtdiv = length
	for i = 0 to length by 1
		if source[i] == 0
			lenghtdiv -= 1
			lenghtdiv
		else
			sum += source[i]
			sum
	sum / lenghtdiv

macd_offset = input(title='MACD EMA Offset', defval=1.2)

sourcelower = hist < 0 ? hist : 0
sourceupper = hist > 0 ? hist : 0
length = 400
averagelower = mySma(sourcelower, length) * macd_offset  // call our moving average function and store its value in a variable
averageupper = mySma(sourceupper, length) * macd_offset  // call our moving average function and store its value in a variable

//plot(averageupper, title='Signal Upper', color=color.new(color.red, 0))

//plot(averagelower, title='Signal Lower', color=color.new(color.green, 0))



// Bollinger Bands

_src = hist
_length = input.int(34, minval=1, title='BB Length')
mult = input.float(2.0, minval=0.001, maxval=50, title='BB Mult')
basis = ta.ema(_src, _length)
dev = mult * ta.stdev(_src, _length)
upper = basis + dev
lower = basis - dev

plot(basis, title='BB Basis', color=color.new(color.black, 70))
p1 = plot(upper, title='BB Upper', color=color.new(color.aqua, 50))
p2 = plot(lower, title='BB Lower', color=color.new(color.aqua, 50))
fill(p1, p2, title='BB Background', color=color.new(color.black, 95))


plot(hist, title='Histogram', style=plot.style_columns, color=hist >= 0 ? hist[1] < hist ? col_grow_above : col_fall_above : hist[1] < hist ? col_grow_below : col_fall_below)
plot(macd, title='MACD', color=col_macd)
plot(signal, title='Signal', color=col_signal)